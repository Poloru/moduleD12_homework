"""
Django settings for {{project_name}} project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = '2'
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', '192.168.0.3']
# ALLOWED_HOSTS = ['*']

# LOGIN_URL = '/sign/login/'
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/news/'
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #########
    # 3rd party apps
    #########
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'django_apscheduler',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... здесь нужно указать провайдеры, которые планируете использовать
    'allauth.socialaccount.providers.google',

    #########
    # User apps
    #########
    'news.apps.NewsConfig',
    'sign',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware',

    # Полное кеширование сайта
    # 'django.middleware.cache.UpdateCacheMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    # 'django.middleware.common.CommonMiddleware',
]

# ROOT_URLCONF = '{{project_name}}.urls'
ROOT_URLCONF = 'NewsPort.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = '{{project_name}}.wsgi.application'
WSGI_APPLICATION = 'NewsPort.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_FORMS = {'signup': 'sign.forms.BasicSignupForm'}
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1

EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый

EMAIL_HOST_USER = config('EMAIL_HOST_USER')  # ваше имя пользователя, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')  # пароль от почты

EMAIL_USE_SSL = True  # Яндекс использует ssl, включать его здесь обязательно

DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')

SERVER_EMAIL = config('SERVER_EMAIL')

ADMINS = [
    ('Marat', config('ADMIN_EMAIL')),
    # список всех админов в формате ('имя', 'их почта')
]

# MANAGERS = [
#     ('smg_2006', 'smg_2006@list.ru'),
# ]

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

if DEBUG:     # Включить для эмуляции отправки почты
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),  # Указываем, куда будем сохранять кэшируемые файлы!
        # Не забываем создать папку cache_files внутри папки с manage.py!
        'TIMEOUT': 60,
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'debug_format': {
            'format': '** {asctime} {levelname} {message}',
            'style': '{',
        },
        'warning_and_mail_format': {
            'format': '** {asctime} {levelname} {message} {pathname}',
            'style': '{',
        },
        'error_format': {
            'format': '** {asctime} {levelname} {message} {pathname} {exc_info}',
            'style': '{',
        },
        'info_and_security_format': {
            'format': '** {asctime} {levelname} {module} {message}',
            'style': '{',
        },
    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },

    'handlers': {
        'debug_console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'debug_format',
            'filters': ['require_debug_true'],
        },
        'warning_console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'warning_and_mail_format',
            'filters': ['require_debug_true'],
        },
        'error_console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'error_format',
            'filters': ['require_debug_true'],
        },
        'info_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'Logs/general.log',
            'formatter': 'info_and_security_format',
            'filters': ['require_debug_false'],
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'Logs/errors.log',
            'formatter': 'error_format',
        },
        'security_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'Logs/security.log',
            'formatter': 'info_and_security_format',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'warning_and_mail_format',
            'filters': ['require_debug_false'],
        },
    },

    'loggers': {
        'django': {
            'level': 'DEBUG',
            'handlers': ['debug_console', 'warning_console', 'error_console', 'info_file'],
            'propagate': True,
        },
        'django.request': {
            'level': 'ERROR',
            'handlers': ['error_file', 'mail_admins'],
            'propagate': False,
        },
        'django.server': {
            'level': 'ERROR',
            'handlers': ['error_file', 'mail_admins'],
            'propagate': False,
        },
        'django.template': {
            'level': 'ERROR',
            'handlers': ['error_file'],
            'propagate': False,
        },
        'django.db_backends': {
            'level': 'ERROR',
            'handlers': ['error_file'],
            'propagate': False,
        },
        'django.security': {
            'level': 'INFO',
            'handlers': ['security_file'],
            'propagate': False,
        },

    },
}



# --------------------------------------------
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'formatter_console': {
#             'format': '*{levelname}* {asctime} {module} {message}',
#             'style': '{',
#         },
#         'formatter_info_file': {
#             'format': '*{levelname}* {asctime} {module} {message}',
#             'style': '{',
#         },
#     },
#
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#
#     'handlers': {
#         'console': {
#             # 'level': 'INFO',
#             # 'level': 'DEBUG',
#             # 'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#             'formatter': 'formatter_console',
#         },
#         'info_file': {
#             # 'level': 'INFO',
#             'class': 'logging.FileHandler',
#             # 'filters': ['require_debug_false'],
#             'formatter': 'formatter_info_file',
#             # 'filename': 'Logs/general.log',
#             'filename': 'Logs/general.log',
#         },
#     },
#
#     'loggers': {
#         'info_file': {
#             'handlers': ['info_file', 'console'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#         # 'django': {
#         #     'handlers': ['console', ],
#         #     'propagate': True,
#         # },
#     },
#
#
# }

# --------------------------------------------
